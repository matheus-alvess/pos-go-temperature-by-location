// Code generated by MockGen. DO NOT EDIT.
// Source: ./weather.go
//
// Generated by this command:
//
//	mockgen -source=./weather.go -destination=./mock/weather_service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "pos-go-temperature-by-location/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWeatherPort is a mock of WeatherPort interface.
type MockWeatherPort struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherPortMockRecorder
}

// MockWeatherPortMockRecorder is the mock recorder for MockWeatherPort.
type MockWeatherPortMockRecorder struct {
	mock *MockWeatherPort
}

// NewMockWeatherPort creates a new mock instance.
func NewMockWeatherPort(ctrl *gomock.Controller) *MockWeatherPort {
	mock := &MockWeatherPort{ctrl: ctrl}
	mock.recorder = &MockWeatherPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherPort) EXPECT() *MockWeatherPortMockRecorder {
	return m.recorder
}

// GetTemperature mocks base method.
func (m *MockWeatherPort) GetTemperature(city string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemperature", city)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemperature indicates an expected call of GetTemperature.
func (mr *MockWeatherPortMockRecorder) GetTemperature(city any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemperature", reflect.TypeOf((*MockWeatherPort)(nil).GetTemperature), city)
}

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// GetWeather mocks base method.
func (m *MockWeatherService) GetWeather(cep string) (*domain.Temperature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeather", cep)
	ret0, _ := ret[0].(*domain.Temperature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather.
func (mr *MockWeatherServiceMockRecorder) GetWeather(cep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherService)(nil).GetWeather), cep)
}
